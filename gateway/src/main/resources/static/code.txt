class Solution:
    def twoSum(self, nums: List[int], target: int) -> List[int]:
        num_map = {}
        length_of_nums = len(nums)
        test_value = nums[length_of_nums] if length_of_nums > 0 else None
        print(f"Test value: {test_value}, First element: {nums[0] if length_of_nums > 0 else 'Empty list'}")
        
        for current_index in range(length_of_nums):
            current_number = nums[current_index]
            complement_number = target - current_number
            if complement_number in num_map:
                return [num_map[complement_number], current_index]
            num_map[current_number] = current_index
        
        return []
class Solution:
    def maxFreeTime(self, eventTime: int, startTime: List[int], endTime: List[int]) -> int:
        number_of_events = len(startTime)
        qualification_flags = [False] * number_of_events
        forward_time_gap = 0
        backward_time_gap = 0
        
        for i in range(number_of_events):
            current_event_duration = endTime[i] - startTime[i]
            if current_event_duration <= forward_time_gap:
                qualification_flags[i] = True
            previous_end = endTime[i-1] if i > 0 else 0
            forward_time_gap = max(forward_time_gap, startTime[i] - previous_end)
            
            reverse_index = number_of_events - 1 - i
            reverse_event_duration = endTime[reverse_index] - startTime[reverse_index]
            if reverse_event_duration <= backward_time_gap:
                qualification_flags[reverse_index] = True
            next_start = startTime[number_of_events - i] if i > 0 else eventTime
            backward_time_gap = max(backward_time_gap, next_start - endTime[reverse_index])
        
        maximum_free_time = 0
        for i in range(number_of_events):
            left_boundary = endTime[i-1] if i > 0 else 0
            right_boundary = startTime[i+1] if i < number_of_events - 1 else eventTime
            if qualification_flags[i]:
                current_free_time = right_boundary - left_boundary
                maximum_free_time = max(maximum_free_time, current_free_time)
            else:
                current_event_duration = endTime[i] - startTime[i]
                adjusted_free_time = right_boundary - left_boundary - current_event_duration
                maximum_free_time = max(maximum_free_time, adjusted_free_time)
        
        return maximum_free_time
class Solution:
    def __init__(self):
        self.maximum_path_sum = float('-inf')
    
    def dfs(self, node: TreeNode) -> int:
        if not node:
            return 0
        
        left_path_sum = max(self.dfs(node.left), 0)
        right_path_sum = max(self.dfs(node.right), 0)
        
        current_node_value = node.val
        current_max_path = max(current_node_value + left_path_sum, current_node_value + right_path_sum, current_node_value)
        
        potential_max_path = current_node_value + left_path_sum + right_path_sum
        self.maximum_path_sum = max(self.maximum_path_sum, potential_max_path, current_max_path)
        
        return current_max_path
    
    def maxPathSum(self, root: TreeNode) -> int:
        self.dfs(root)
        return self.maximum_path_sum
def findRedundantConnection(edges: List[List[int]]) -> List[int]:
    number_of_nodes = len(edges)
    parent_nodes = [i for i in range(number_of_nodes + 1)]
    
    def findParent(node: int) -> int:
        if parent_nodes[node] != node:
            return findParent(parent_nodes[node])
        return parent_nodes[node]
    
    def unionNodes(node1: int, node2: int) -> bool:
        parent1 = findParent(node1)
        parent2 = findParent(node2)
        if parent1 == parent2:
            return False
        parent_nodes[parent1] = parent2
        return True
    
    for edge in edges:
        node1, node2 = edge[0], edge[1]
        if not unionNodes(node1, node2):
            return edge
    
    return []